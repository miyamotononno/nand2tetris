// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // 命令がA命令かC命令かで分岐
    // instruction[3..5]はdest領域, 
    And(a=instruction[3], b=instruction[15], out=writeM); // Mに書き込み
    And(a=instruction[4], b=instruction[15], out=loadd);
    Not(in=instruction[15], out=notin15);
    Or(a=instruction[5], b=notin15, out=loada);

    // instruction[6..12]がcomp領域, 
    Mux16(a=instruction, b=oM, sel=instruction[15], out=iadr);
    ARegister(in=iadr, load=loada, out=areg, out[0..14]=addressM);
    DRegister(in=iadr, load=loadd, out=x);
    PC(in=areg, load=loadpc, inc=true, reset=reset, out[0..14]=pc);
    Mux16(a=areg, b=inM, sel=instruction[12], out=y);

    ALU(x=x,y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=oM, out=outM, zr=zr, ng=ng);

    // 命令フェッチ instruction[0..2]がjump領域
    And(a=instruction[2], b=ng, out=jn);
    And(a=instruction[1], b=zr, out=jz);
    Or(a=ng, b=zr, out=nz); // 0以下
    Not(in=nz, out=p); // 0より大きい
    And(a=instruction[0], b=p, out=jp);
    Or(a=jn, b=jz, out=jnz);
    Or(a=jnz, b=jp, out=j); // jumpする
    And(a=j, b=instruction[15], out=loadpc);
}